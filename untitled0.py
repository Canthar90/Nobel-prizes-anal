# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZmctjlKaNbw4fr4Ctt1abm__KMa85b5s
"""

# %pip install --upgrade plotly

import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import seaborn as sns

nobel_df = pd.read_csv("nobel_prize_data.csv")
nobel_df.head()

nobel_df.tail()

nobel_df.shape

nobel_df.columns

nobel_df.year.min()

nobel_df.year.max()

nobel_df.isna().sum()

nobel_df.birth_date = pd.to_datetime(nobel_df.birth_date)
nobel_df.head()

nobel_df['share_pct'] = (nobel_df.prize_share.apply(eval))
nobel_df['share_pct']

nobel_gender = nobel_df.groupby("sex").count()
nobel_gender

fig = go.Figure(data=[go.Pie(labels=nobel_gender.index, values=nobel_gender.category, hole=.3 )])
fig.show()

female_nobel = nobel_df[nobel_df.sex=='Female']
female_nobel.sort_values('year').head()

many_nobel_female=female_nobel[female_nobel.full_name.duplicated(keep=False)]
many_nobel_female

male_nobel = nobel_df[nobel_df.sex=='Male']

nobel_df.groupby('laureate_type').count()

nobel_categories = nobel_df.groupby('category').count()

nobel_categories = nobel_categories.sort_values('year', ascending=False)

fig = px.bar(nobel_categories, x=nobel_categories.index, y=nobel_categories.prize,
             color=nobel_categories.prize,
             color_continuous_scale='Aggrnyl',
             )
fig.update_layout( yaxis_title='Number of prizes in cattegory',
                   coloraxis_showscale=False)
fig.show()

economic_nobel = nobel_df[nobel_df.category=='Economics']
economic_nobel.sort_values('year').head()

male_nobel.head()

male_nobel_grouped = male_nobel.groupby('category').count()
male_nobel_grouped

female_nobel.head()

female_nobel_grouped = female_nobel.groupby('category').count()
female_nobel_grouped

cat_men_women = nobel_df.groupby(['category', 'sex'], 
                               as_index=False).agg({'prize': pd.Series.count})
cat_men_women.sort_values('prize', ascending=False, inplace=True)

fig = px.bar( x = cat_men_women.category,
                     y = cat_men_women.prize,
                     color = cat_men_women.sex,
                     title='Number of Prizes Awarded per Category split by Men and Women')
fig.update_layout(xaxis_title='Nobel Prize Category', 
                          yaxis_title='Number of Prizes')
fig.show()

nobel_year = nobel_df.groupby(by='year').count().prize
nobel_year.head()

moving_average = nobel_year.rolling(window=5).mean()
moving_average

year_average = nobel_df.groupby('year').agg({'share_pct':pd.Series.mean})
share_moving_average = year_average.rolling(window=5).mean()

plt.figure(figsize=(16,8), dpi=200)
plt.title('Number of Nobel Prizes Awardet per Year', fontsize=18)
plt.yticks(fontsize=14)
plt.xticks(ticks=np.arange(1900, 2021, step=5),
           fontsize=14,
           rotation=45)


ax = plt.gca() # get current axis
ax2 = ax.twinx()
ax.set_xlim(1900, 2020)
# first plot all points 
ax.scatter(x=nobel_year.index, 
           y=nobel_year.values, 
           c='dodgerblue',
           alpha=0.7,
           s=100,)
 
#  second plot red line
ax.plot(nobel_year.index, 
        moving_average.values, 
        c='crimson', 
        linewidth=3,)
# second axis needs to be inverted
ax2.invert_yaxis()

ax2.plot(nobel_year.index,
         share_moving_average.values,
         c='grey',
         linewidth=3)
 
plt.show()

nobel_df.head()

nobel_df.tail()

top_countries = nobel_df.groupby(['birth_country_current'], as_index=False).agg({'prize': pd.Series.count})
top_countries
top_countries.sort_values(by='prize', inplace=True)
top20_countries = top_countries[-20:]
top20_countries.head()

t20_bar=px.bar(x=top20_countries.prize,
               y=top20_countries.birth_country_current,
               orientation='h',
               color=top20_countries.prize,
               color_continuous_scale='Viridis',
               title='Top 20 Counries in number of Nobel Prizes')

t20_bar.update_layout(xaxis_title='Number of Prizes',
                      yaxis_title="Countries",
                      coloraxis_showscale=False)

t20_bar.show()

df_countries = nobel_df.groupby(['birth_country_current', 'ISO'],
                                as_index=False).agg({'prize': pd.Series.count})

df_countries.sort_values('prize', ascending=False)

world_map = px.choropleth(df_countries,
                          locations='ISO',
                          color='prize',
                          hover_name='birth_country_current',
                          color_continuous_scale=px.colors.sequential.matter)

world_map.update_layout(coloraxis_showscale=True)

world_map.show()

cat_country = nobel_df.groupby(['birth_country_current', 'category'], as_index=False).agg({'prize': pd.Series.count})
cat_country.sort_values(by='prize', ascending=False, inplace=True)
cat_country.head()

merged_df = pd.merge(cat_country ,top20_countries, on='birth_country_current')

#changing column names
merged_df.columns = ['birth_country_current', 'category', 'cat_prize', 'total_prize']
merged_df.sort_values(by='total_prize', inplace=True)
merged_df

cat_cyntr_bar = px.bar(x=merged_df.cat_prize,
                       y=merged_df.birth_country_current,
                       color=merged_df.category,
                       orientation='h',
                       title='Top 20 Contries By Numer And Category')

cat_cyntr_bar.update_layout(xaxis_title='Number of Prizes',
                            yaxis_title='Countries')

cat_cyntr_bar.show()

prize_by_year = nobel_df.groupby(by=['birth_country_current','year'], as_index=False).count()
prize_by_year = prize_by_year.sort_values('year')[['year', 'birth_country_current', 'prize']]
prize_by_year

cumulative_prizes = prize_by_year.groupby(by=['birth_country_current','year']).sum().groupby(level=[0]).cumsum()
cumulative_prizes.reset_index(inplace=True)
cumulative_prizes

l_chart = px.line(cumulative_prizes,
                  x='year',
                  y='prize',
                  color='birth_country_current',
                  hover_name='birth_country_current')

l_chart.update_layout(xaxis_title='year',
                      yaxis_title='Number of prizes')
l_chart.show()

nobel_df.sample(5)

top_organizations = nobel_df.groupby('organization_name').agg({'prize': pd.Series.count})
top_organizations.sort_values(by='prize', inplace=True, ascending=True)
top20_organizations=top_organizations[-20:]

top_org = px.bar(
                 y=top20_organizations.index,
                 x=top20_organizations.prize,
                 color=top20_organizations.prize,
                 orientation='h')
top_org.update_layout(title='Top 20 reserch instytutions by Nobel Prize number',
                      xaxis_title='Number of prizes',
                      yaxis_title='Instytution Name')

top_org.show()

top20_organizations_city = nobel_df.organization_city.value_counts()[:20]
top20_organizations_city.sort_values(ascending=True, inplace=True)
top20_organizations_city
city_bar = px.bar(x=top20_organizations_city.values,
                  y=top20_organizations_city.index,
                  orientation='h',
                  color=top20_organizations_city.values,
                  color_continuous_scale=px.colors.sequential.Plasma,
                  title='Cities that do the most Research')

city_bar.update_layout(xaxis_title='Number of Prizes',
                       yaxis_title='City Name',
                       coloraxis_showscale=False)

city_bar.show()

top20_b_city = nobel_df.birth_city.value_counts()[:20]
top20_b_city.sort_values(ascending=True, inplace=True)
top20_b_city
bcity_bar = px.bar(x=top20_b_city.values,
                  y=top20_b_city.index,
                  orientation='h',
                  color=top20_b_city.values,
                  color_continuous_scale=px.colors.sequential.Plasma,
                  title='Where was the nobel laureates born')

bcity_bar.update_layout(xaxis_title="number of Nobel prize winners",
                        yaxis_title='City name',
                        coloraxis_showscale=False)
bcity_bar.show()

country_city_org = nobel_df.groupby(by=['organization_country',
                                      'organization_city',
                                      'organization_name'], as_index=False).agg({'prize': pd.Series.count})
country_city_org = country_city_org.sort_values('prize', ascending=False)

country_city_org.head()

burst = px.sunburst(country_city_org,
                    path=['organization_country', 'organization_city', 'organization_name'],
                    values='prize',
                    title='Where do Discoveries Take Place?')
burst.update_layout(xaxis_title='Number of Prizes',
                    yaxis_title='City',
                    coloraxis_showscale=False)

burst.show()

birth_years = nobel_df.birth_date.dt.year
nobel_df['winning_age'] = nobel_df.year - birth_years

display(nobel_df.nlargest(n=1, columns='winning_age'))
display(nobel_df.nsmallest(n=1, columns='winning_age'))

plt.figure(figsize=(8,4), dpi=200)

plt.hist(x=nobel_df.winning_age,
             bins=30,
         edgecolor = "black")
plt.xlabel('Age')
# x.hist(a, b, edgecolor = "black")
  
plt.title('Distribution of Age on Reciept of Prize')
plt.show()

# winning age over time 

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style('whitegrid'):
  sns.regplot(data=nobel_df,
              x='year',
              y='winning_age',
              lowess=True,
              scatter_kws={'alpha': 0.4},
              line_kws={'color': 'black'})
  plt.show()

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style('whitegrid'):
  sns.boxplot(data=nobel_df,
              x='category',
              y='winning_age')
  plt.show()

with sns.axes_style('whitegrid'):
  sns.lmplot(data=nobel_df,
             x='year',
             y='winning_age',
             row='category',
             lowess=True,
             aspect=2,
             scatter_kws={'alpha': 0.6},
             line_kws={'color': 'black'})
  plt.show()

with sns.axes_style('whitegrid'):
  sns.lmplot(data=nobel_df,
             x='year',
             y='winning_age',
             hue='category',
             lowess=True,
             aspect=2,
             scatter_kws={'alpha': 0.5},
             line_kws={'linewidth': 5})
  plt.show()